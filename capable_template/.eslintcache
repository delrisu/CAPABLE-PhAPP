[{"E:\\GitHub\\CAPABLE-PhAPP\\capable_template\\src\\index.js":"1","E:\\GitHub\\CAPABLE-PhAPP\\capable_template\\src\\App.js":"2","E:\\GitHub\\CAPABLE-PhAPP\\capable_template\\src\\Patients.js":"3","E:\\GitHub\\CAPABLE-PhAPP\\capable_template\\src\\Documentation.js":"4","E:\\GitHub\\CAPABLE-PhAPP\\capable_template\\src\\Navbar.js":"5","E:\\GitHub\\CAPABLE-PhAPP\\capable_template\\src\\Home.js":"6","E:\\GitHub\\CAPABLE-PhAPP\\capable_template\\src\\Dashboard.js":"7","E:\\GitHub\\CAPABLE-PhAPP\\capable_template\\src\\PatientsForm.js":"8","E:\\GitHub\\CAPABLE-PhAPP\\capable_template\\src\\Prescriptions.js":"9","E:\\GitHub\\CAPABLE-PhAPP\\capable_template\\src\\PrescriptionsForm.js":"10","E:\\GitHub\\CAPABLE-PhAPP\\capable_template\\src\\PatientCard.js":"11"},{"size":218,"mtime":1608417884000,"results":"12","hashOfConfig":"13"},{"size":1128,"mtime":1611746720358,"results":"14","hashOfConfig":"13"},{"size":27553,"mtime":1611746754786,"results":"15","hashOfConfig":"13"},{"size":359,"mtime":1606946366000,"results":"16","hashOfConfig":"13"},{"size":2114,"mtime":1611746745378,"results":"17","hashOfConfig":"13"},{"size":910,"mtime":1606946366000,"results":"18","hashOfConfig":"13"},{"size":1952,"mtime":1606946366000,"results":"19","hashOfConfig":"13"},{"size":51029,"mtime":1611695372959,"results":"20","hashOfConfig":"13"},{"size":20838,"mtime":1611692748851,"results":"21","hashOfConfig":"13"},{"size":24764,"mtime":1611655342165,"results":"22","hashOfConfig":"13"},{"size":6747,"mtime":1608552009000,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1ufor2f",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"26"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"26"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"26"},"E:\\GitHub\\CAPABLE-PhAPP\\capable_template\\src\\index.js",[],["51","52"],"E:\\GitHub\\CAPABLE-PhAPP\\capable_template\\src\\App.js",[],"E:\\GitHub\\CAPABLE-PhAPP\\capable_template\\src\\Patients.js",["53"],"E:\\GitHub\\CAPABLE-PhAPP\\capable_template\\src\\Documentation.js",[],"E:\\GitHub\\CAPABLE-PhAPP\\capable_template\\src\\Navbar.js",[],"E:\\GitHub\\CAPABLE-PhAPP\\capable_template\\src\\Home.js",["54"],"import React from 'react'\nimport \"./bootstrap.min.css\";\nimport \"./styles.css\";\n\n\nexport default function Home() {\n    return (\n        <div className=\"content-main\">\n            <h1><span className=\"badge badge-dark\">Homepage</span></h1>\n\n            <div className=\"welcome-screen\">\n                <div className=\"jumbotron\">\n                    <h1 className=\"display-4\">Hello, world!</h1>\n                    <p className=\"lead\">This is a simple hero unit, a simple jumbotron-style component for calling extra attention to featured content or information.</p>\n                    <hr className=\"my-4\"></hr>\n                    <p>It uses utility classes for typography and spacing to space content out within the larger container.</p>\n                    <a className=\"btn btn-primary btn-lg\" href=\"#\" role=\"button\">Learn more</a>\n                </div>\n            </div>\n        </div>\n        \n\n    )\n}\n","E:\\GitHub\\CAPABLE-PhAPP\\capable_template\\src\\Dashboard.js",[],"E:\\GitHub\\CAPABLE-PhAPP\\capable_template\\src\\PatientsForm.js",[],"E:\\GitHub\\CAPABLE-PhAPP\\capable_template\\src\\Prescriptions.js",["55","56","57","58"],"import MaterialTable        from 'material-table';\nimport React, { useState } from 'react';\nimport Modal                from 'react-bootstrap/Modal'\nimport { Button }           from 'reactstrap';\nimport PrescriptionsForm    from './PrescriptionsForm'\nimport status_tick from     './images/status_tick.png';\nimport status_x from        './images/status_x.png';\nimport \"./bootstrap.min.css\";\nimport \"./styles.css\";\n\nconst codes = {\n    codeine:        387494007,\n    morphine:       373529000,\n    nivolumab:      704191007,\n    sunitinib:      421192001,\n    loperamide:     387040009,\n    budesonide:     395726003,\n    st_johns_wort:  412515006\n}\n\nconst columns = [\n    {\n        title: \"Medicine\",\n        field: \"medicine\"\n    },\n    {\n        title: \"Using from\",\n        field: \"from\"\n    },\n    {\n        title: \"Using to\",\n        field: \"to\"\n    },\n    {\n        title: \"Take as needed\",\n        field: \"asNeeded\"\n    },\n    {\n        title: \"Dosing\",\n        field: \"dosing\"\n    },\n    {\n        title: \"Status\",\n        field: \"status\",\n        render: rowData => <img src={rowData.status} style={{width: 20, borderRadius: '50%'}}/>\n    }\n]\n\nexport default function Prescriptions({client, data, comms, commIDs, drafts, stopped, show, onHide, patientRef}) {\n    const [prescEditShow, setPrescEditShow] = useState(false);\n    const [prescFormEditData, setPrescFormEditData] = useState({});\n    const [prescNewShow, setPrescNewShow] = useState(false);\n    // const [prescFormEditData, setPrescFormEditData] = useState({});\n    console.log(\"comms:\")\n    console.log(comms)\n    console.log(\"commIDs\")\n    console.log(commIDs)\n    console.log(\"drafts:\")\n    console.log(drafts)\n    console.log(\"Stopped medReqs:\")\n    console.log(stopped)\n    function checkStatus(medID, commID) {\n        let result = true\n        if (stopped !== undefined && stopped.length > 0 && comms.length > 0) {\n            stopped.forEach(element => {\n                if (element.resource.priorPrescription.identifier.value === medID) {\n                    comms.forEach(element2 => {\n                        if (element2.resource.id === commID)\n                        result = false;\n                        console.log(\"Pasuje do leku \" + element.resource.id.toString())\n                        console.log(element)\n                    });\n                    \n                }\n            });\n        }\n        return result;\n    }\n\n    function convertRowData () {\n        let rowData = data;\n        let i, j;\n        let medications = []\n        console.log(\"In prescs:\")\n        console.log(rowData.length)\n        // for (i=0; i<4; i++) {\n        //     console.log(rowData[i].resource.id)\n        // }\n        \n        for (i = 0; i < rowData.length; i++) {\n            console.log(rowData[i].resource.id)\n            let medData = {\n                id:             rowData[i].resource.id,\n                patient:        rowData[i].resource.subject.reference,\n                medicine:       rowData[i].resource.medicationCodeableConcept.coding[0].display,\n                medicineCode:   rowData[i].resource.medicationCodeableConcept.coding[0].code,\n                from:           rowData[i].resource.dosageInstruction[0].timing.repeat.boundsPeriod.start,\n                to:             rowData[i].resource.dosageInstruction[0].timing.repeat.boundsPeriod.end,\n                asNeeded:       rowData[i].resource.dosageInstruction[0].asNeededBoolean,\n                // frequency:      rowData[i].resource.dosageInstruction[0].timing.repeat.frequency,\n                // period:         rowData[i].resource.dosageInstruction[0].timing.repeat.period,\n                // periodUnit:     rowData[i].resource.dosageInstruction[0].timing.repeat.periodUnit,\n                doseValue:      rowData[i].resource.dosageInstruction[0].doseAndRate[0].doseQuantity.value,\n                doseUnit:       rowData[i].resource.dosageInstruction[0].doseAndRate[0].doseQuantity.unit,\n                dosing:         rowData[i].resource.dosageInstruction[0].text,\n                status:         null,//checkStatus(rowData[i].resource.id) ? status_tick : status_x,\n                // status:         comms.includes(rowData[i].resource.id) ? status_x : status_tick,\n                draft:          null,\n                attachedCommID: null,\n                relatedObjIDs:  [],\n                relatedStopped: null,\n                relatedDraft:   null,\n                relatedComm:    null,\n                json:           rowData[i].resource\n            }\n\n\n            // if (drafts !== undefined || drafts.length > 0) {\n            //     drafts.forEach(element => {\n            //         if (medData.medicineCode === element.medicationCodeableConcept.coding[0].code) {\n            //             medData.draft = element\n            //         }\n            //     });\n            // }\n            if (stopped !== undefined && stopped.length > 0 && comms.length > 0) {\n                stopped.forEach(element => {\n                    if (element.resource.priorPrescription.identifier.value === medData.id) {\n                        commIDs.forEach(element2 => {\n                            if (element2[1] === element.resource.id) {\n                                medData.attachedCommID = element2[0]\n                            }\n                        });\n                        \n                    }\n                })\n            }\n            // if (commIDs !== undefined || commIDs.length > 0) {\n            //     commIDs.forEach(element => {\n            //         if (element[1] === medData.id) {\n            //             medData.attachedCommID = element[0]\n            //         }\n            //     })\n            // }\n            console.log(\"attached comm id:\")\n            console.log(medData.attachedCommID)\n            if (commIDs !== undefined && commIDs.length > 0) {\n                commIDs.forEach(element => {\n                    if (element[0] === medData.attachedCommID) {\n                        medData.relatedObjIDs.push(element[1])\n                    }\n                });\n            }\n\n            if (stopped !== undefined && stopped.length > 0) {\n                stopped.forEach(element => {\n                    for (let i=0; i<medData.relatedObjIDs.length; i++) {\n                        if (element.resource.id === medData.relatedObjIDs[i]) {\n                            medData.relatedStopped = element\n                        }\n                    }\n                });\n            }\n            console.log(\"related stopped\")\n            console.log(medData.relatedStopped)\n            console.log('-------')\n            if (drafts !== undefined && drafts.length > 0) {\n                drafts.forEach(element => {\n                    for (let i=0; i<medData.relatedObjIDs.length; i++) {\n                        if (element.resource.id === medData.relatedObjIDs[i]) {\n                            medData.relatedDraft = element\n                        }\n                    }\n                });\n            }\n            console.log(\"related draft\")\n            console.log(medData.relatedDraft)\n\n            if (comms !== undefined && comms.length > 0) {\n                comms.forEach(element => {\n                    if (element.resource.id === medData.attachedCommID) {\n                        medData.relatedComm = element\n                    }\n                });\n            }\n\n            medData.status = checkStatus(medData.id, medData.attachedCommID) ? status_tick : status_x\n\n            // medData.dosing = medData.frequency + \"x \" + medData.doseValue + medData.doseUnit + \" every \" + medData.period + \" \" + medData.periodUnit;\n            medications.push(medData);\n        }\n        return medications;\n    }\n\n    const medicationsData = convertRowData();\n    console.log(\"MedData:\")\n    console.log(medicationsData)\n    return (\n        <div>\n            <Modal\n                size=\"xl\"\n                // dialogClassName=\"modal-90w\"\n                aria-labelledby=\"contained-modal-title-vcenter\"\n                centered\n                show={show}\n                onHide={onHide}\n            >\n                <Modal.Header closeButton>\n                    <Modal.Title id=\"contained-modal-title-vcenter\">\n                        Prescriptions\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <MaterialTable\n                        columns={columns}\n                        data={medicationsData !== undefined ? medicationsData : null}\n                        title=\"\"\n                        onRowClick={(event, rowData) => {\n                            function convertToDates(value, unit) {\n                                let returnDates = []\n                                let today = new Date();\n                                let dd = String(today.getDate()).padStart(2, '0');\n                                let mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n                                let yyyy = today.getFullYear();\n\n                                returnDates.push(yyyy + '-' + mm + '-' + dd)\n                                if (unit === \"wk\") {\n                                    today.setDate(today.getDate()+(7*value))\n                                    dd = String(today.getDate()).padStart(2, '0');\n                                    mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n                                    yyyy = today.getFullYear();\n                                    returnDates.push(yyyy + '-' + mm + '-' + dd)\n                                } \n                                else if (unit === \"d\") {\n                                    today.setDate(today.getDate()+value)\n                                    dd = String(today.getDate()).padStart(2, '0');\n                                    mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n                                    yyyy = today.getFullYear();\n                                    returnDates.push(yyyy + '-' + mm + '-' + dd)\n                                }\n                                return returnDates\n                            }\n                            if (rowData.status === status_x) {\n                                // stopped.forEach(element => {\n                                //     if (rowData.id === element.resource.id) {\n\n                                //     }\n                                // });\n                                // console.log(rowData.draft)\n                                if (rowData.relatedStopped !== undefined && rowData.relatedDraft !== undefined) {\n                                    let tempDraft = {\n                                        id:             rowData.relatedDraft.resource.id,\n                                        patient:        rowData.relatedDraft.resource.subject.reference,\n                                        medicine:       rowData.relatedDraft.resource.medicationCodeableConcept.coding[0].display,\n                                        medicineCode:   rowData.relatedDraft.resource.medicationCodeableConcept.coding[0].code,\n                                        // from:           rowData.relatedDraft.resource.dosageInstruction[0].timing.repeat.boundsPeriod.start,\n                                        // to:             rowData.relatedDraft.resource.dosageInstruction[0].timing.repeat.boundsPeriod.end,\n                                        dosageText:     rowData.relatedDraft.resource.dosageInstruction[0].text,\n                                        boundValue:     rowData.relatedDraft.resource.dosageInstruction[0].timing.repeat.boundsDuration.value,\n                                        boundUnit:      rowData.relatedDraft.resource.dosageInstruction[0].timing.repeat.boundsDuration.unit,\n                                        asNeeded:       rowData.relatedDraft.resource.dosageInstruction[0].asNeededBoolean,\n                                        // frequency:      rowData.relatedDraft.resource.dosageInstruction[0].timing.repeat.frequency,\n                                        // period:         rowData.relatedDraft.resource.dosageInstruction[0].timing.repeat.period,\n                                        // periodUnit:     rowData.relatedDraft.resource.dosageInstruction[0].timing.repeat.periodUnit,\n                                        // doseValue:      rowData.relatedDraft.resource.dosageInstruction[0].doseAndRate[0].doseQuantity.value,\n                                        // doseUnit:       rowData.relatedDraft.resource.dosageInstruction[0].doseAndRate[0].doseQuantity.unit,\n                                        // dosing:         rowData.relatedComm.resource.dosageInstruction[0].text\n                                    }\n                                    // tempDraft.dosing = tempDraft.frequency + \"x \" + tempDraft.doseValue + tempDraft.doseUnit + \" every \" + tempDraft.period + \" \" + tempDraft.periodUnit;\n                                    let expectedDates = convertToDates(tempDraft.boundValue, tempDraft.boundUnit)\n                                    let confirmMsg = 'Prescribe ' + tempDraft.medicine + '\\n'\n                                    confirmMsg = confirmMsg + 'Dosing: ' + tempDraft.dosageText + '\\n'\n                                    confirmMsg = confirmMsg + 'When: from ' + expectedDates[0] + ' to ' + expectedDates[1]\n                                    if (window.confirm('Do you wish to apply the suggestion below?\\n' + confirmMsg)) {\n                                        let modifiedDraftBody = rowData.relatedDraft.resource\n                                        modifiedDraftBody.status = \"active\"\n                                        modifiedDraftBody.intent = \"order\"\n                                        delete modifiedDraftBody.dosageInstruction[0].timing.repeat.boundsDuration\n                                        delete modifiedDraftBody.meta\n                                        \n                                        let freq = modifiedDraftBody.dosageInstruction[0].timing.repeat.frequency\n                                        let period = modifiedDraftBody.dosageInstruction[0].timing.repeat.period\n                                        let periodUnit = modifiedDraftBody.dosageInstruction[0].timing.repeat.periodUnit\n                                        let boundsPeriod = {boundsPeriod: {start: expectedDates[0], end: expectedDates[1]}}\n                                        console.log(\"frequency: \" + freq.toString() + \"-- period: \" + period.toString() + \"-- periodUnit: \" + periodUnit.toString())\n                                        console.log(boundsPeriod)\n\n                                        modifiedDraftBody.dosageInstruction[0].timing.repeat = {...boundsPeriod, freq, period, periodUnit}\n                                        // modifiedDraftBody.dosageInstruction[0].timing.repeat.boundsPeriod = {from: expectedDates[0], to: expectedDates[1]}\n                                        console.log(modifiedDraftBody)\n                                        // = {\n                                        //     \"resourceType\": \"MedicationRequest\",\n                                        //     \"status\": \"active\",\n                                        //     \"intent\": \"order\"\n                                        // }\n                                        client.update({ resourceType: 'MedicationRequest', id: tempDraft.id, body: modifiedDraftBody})\n\n                                        if (window.confirm('(Regarding the previous suggestion)\\nDo you wish to cancel prescription of ' + rowData.medicine + '?')) {\n                                            let modifiedOriginalBody = rowData.json\n                                            modifiedOriginalBody.status = \"stopped\"\n                                            delete modifiedOriginalBody.meta\n                                            // = {\n                                            //     \"resourceType\": \"MedicationRequest\",\n                                            //     \"status\": \"stopped\"\n                                            // }\n                                            client.update({ resourceType: 'MedicationRequest', id: rowData.id, body: modifiedOriginalBody})\n                                        }\n\n                                        let modifiedCommBody = rowData.relatedComm.resource\n                                        modifiedCommBody.status = \"in-progress\"\n                                        delete modifiedCommBody.meta\n                                        client.update({ resourceType: 'Communication', id: rowData.attachedCommID, body: modifiedCommBody})\n                                    }\n                                    else {\n                                        let modifiedDraftBody = rowData.relatedDraft.resource\n                                        modifiedDraftBody.status = \"cancelled\"\n                                        modifiedDraftBody.intent = \"order\"\n                                        delete modifiedDraftBody.meta\n                                        // let modifiedDraftBody = {\n                                        //     status: \"cancelled\"\n                                        // }\n                                        client.update({ resourceType: 'MedicationRequest', id: tempDraft.id, body: modifiedDraftBody})\n\n                                        let modifiedCommBody = rowData.relatedComm.resource\n                                        modifiedCommBody.status = \"in-progress\"\n                                        delete modifiedCommBody.meta\n                                        client.update({ resourceType: 'Communication', id: rowData.attachedCommID, body: modifiedCommBody})\n                                    }\n                                }\n                                window.location.reload(false);\n                                \n                            }\n                            else {\n                                alert(\"This prescription does not require any action to be taken!\")\n                                // window.location.reload(false);\n                            }\n                        }}\n                        actions={[\n                            {\n                                icon: 'add',\n                                tooltip: 'Add a new prescription',\n                                isFreeAction: true,\n                                onClick: (event, rowData) => {\n                                    setPrescNewShow(true);\n                                }\n                            },\n                            {\n                                icon: 'delete',\n                                tooltip: 'Remove this prescription',\n                                onClick: (event, rowData) => {\n                                    client.delete({resourceType: 'MedicationRequest', id: rowData.id});\n                                }\n                            },\n                            {\n                                icon: 'edit',\n                                tooltip: 'Edit prescription',\n                                onClick: (event, rowData) => {\n                                    setPrescEditShow(true);\n                                    setPrescFormEditData(rowData);\n                                }\n                            }\n                        ]}\n                        options={\n                            {\n                                pageSize: 5\n                            },\n                            {\n                                searchFieldAlignment: 'left'\n                            }\n                        }\n                    />\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button onClick={onHide}>Close</Button>\n                </Modal.Footer>\n            </Modal>\n            {prescNewShow===true &&\n                <PrescriptionsForm\n                    show={prescNewShow}\n                    onHide={() => setPrescNewShow(false)}\n                    client={client}\n                    data={false}\n                    patient={patientRef.id}\n                    prescCount={data.length}\n                />\n            }\n            {prescEditShow===true &&\n                <PrescriptionsForm\n                    show={prescEditShow}\n                    onHide={() => setPrescEditShow(false)}\n                    client={client}\n                    data={prescFormEditData}\n                    patient={patientRef.id}\n                    prescCount={data.length}\n                />\n            }\n            {\n\n            }\n        </div>\n    )\n}","E:\\GitHub\\CAPABLE-PhAPP\\capable_template\\src\\PrescriptionsForm.js",["59","60"],"import React, { Component } from 'react';\nimport Modal                from 'react-bootstrap/Modal'\nimport { Button }           from 'reactstrap';\nimport \"./bootstrap.min.css\";\nimport \"./styles.css\";\n\nclass PrescriptionForm extends Component {\n\n    constructor (props) {\n        super(props);\n        if (this.props.data === false) {\n            this.state = {\n                id:             '',\n                patient:        this.props.patient, //this.props.data\n                medicine:       '',\n                medicineCode:   '',\n                from:           '',\n                to:             '',\n                asNeeded:       false,\n                frequency:      0,\n                period:         0,\n                periodUnit:     '',\n                doseValue:      0,\n                doseUnit:       'mg',\n                dosing:         ''\n            };\n        }\n        else {\n            this.state = {\n                id:             this.props.data.id,\n                patient:        this.props.data.patient,\n                medicine:       this.props.data.medicine,\n                medicineCode:   this.props.data.medicineCode,\n                from:           this.props.data.from,\n                to:             this.props.data.to,\n                asNeeded:       this.props.data.asNeeded,\n                frequency:      this.props.data.frequency,\n                period:         this.props.data.period,\n                periodUnit:     this.props.data.periodUnit,\n                doseValue:      this.props.data.doseValue,\n                doseUnit:       this.props.data.doseUnit,\n                dosing:         this.props.data.dosing\n            };\n        }\n        this.codes = {\n            mg:             258684004,\n            codeine:        387494007,\n            morphine:       373529000,\n            nivolumab:      704191007,\n            sunitinib:      421192001,\n            loperamide:     387040009,\n            budesonide:     395726003,\n            st_johns_wort:  412515006\n        }\n        this.codesRev = {\n            258684004:  \"mg\",\n            387494007:  \"Codeine\",\n            373529000:  \"Morphine\",\n            704191007:  \"Nivolumab\",\n            421192001:  \"Sunitinib\",\n            387040009:  \"Loperamide\",\n            395726003:  \"Budesonide\",\n            412515006:  \"St John's Wort\"\n        }\n        this.handleChange = this.handleChange.bind(this);\n        this.addNewPrescription = this.addNewPrescription.bind(this);\n        this.updatePrescription = this.updatePrescription.bind(this);\n    }\n\n    handleChange (event) {\n        this.setState({ [event.target.name]: event.target.value });\n        console.log(event.target.value);\n    }\n\n    async addNewPrescription () {\n        let tmpStr = this.state.frequency + \"x \" + this.state.doseValue + this.state.doseUnit + \" every \" + this.state.period + \" \" + this.state.periodUnit\n        this.state.dosing = tmpStr;\n        console.log(\"Dosing:\")\n        console.log(this.state.dosing)\n        switch(this.state.medicine) {\n            case \"Nivolumab\":\n                this.state.medicineCode = this.codes.nivolumab;\n                break;\n            case \"Codeine\":\n                this.state.medicineCode = this.codes.codeine;\n                break;\n            case \"Morphine\":\n                this.state.medicineCode = this.codes.morphine;\n                break;\n            case \"Sunitinib\":\n                this.state.medicineCode = this.codes.sunitinib;\n                break;\n            case \"Loperamide\":\n                this.state.medicineCode = this.codes.loperamide;\n                break;\n            case \"Budesonide\":\n                this.state.medicineCode = this.codes.budesonide;\n                break;\n            case \"St John's Wort\":\n                this.state.medicineCode = this.codes.st_johns_wort;\n                break;\n            default:\n                break;\n        }\n        \n        let entry = {\n                resourceType: \"MedicationRequest\",\n                status: \"active\",\n                intent: \"order\",\n                medicationCodeableConcept: {\n                    coding: [{\n                        system: \"http://snomed.info/sct\",\n                        code: this.state.medicineCode,\n                        display: this.state.medicine\n                    }]\n                },\n                subject: {\n                    reference: \"Patient/\" + this.state.patient,\n                    type: \"Patient\",\n                    identifier: {\n                        value: this.state.patient\n                    }\n                },\n                dosageInstruction: [{\n                    text: this.state.dosing,\n                    timing: {\n                        repeat: {\n                            boundsPeriod: {\n                                start: this.state.from,\n                                end: this.state.to\n                            },\n                            frequency: this.state.frequency,\n                            period: this.state.period,\n                            periodUnit: this.state.periodUnit\n                        }\n                    },\n                    asNeededBoolean: this.state.asNeeded,\n                    doseAndRate: [{\n                        doseQuantity: {\n                            value: this.state.doseValue,\n                            unit: this.state.doseUnit,\n                            system: \"http://snomed.info/sct\",\n                            code: this.codes.mg\n                        }\n                    }]\n                }]\n        }\n        // console.log(this.props.client)\n        let response = await this.props.client.create({resourceType: \"MedicationRequest\", body: entry})\n            .then((resource) => {\n                let entryComm = {\n                    resourceType: \"Communication\",\n                    status: \"in-progress\",\n                    payload: [\n                        {\n                            contentReference: {\n                                reference: \"MedicationRequest/\" + resource.id,\n                                type: \"MedicationRequest\",\n                                identifier: {\n                                    value: resource.id\n                                }\n                            }\n                        }\n                    ]\n                }\n\n                this.props.client.create({resourceType: \"Communication\", body: entryComm});\n            })\n        \n        if (this.props.prescCount === undefined || this.props.prescCount < 1) {\n            let entryPatient = {\n                resourceType: \"Communication\",\n                status: \"in-progress\",\n                payload: [\n                    {\n                        contentReference: {\n                            reference: \"Patient/\" + this.state.patient,\n                            type: \"Patient\",\n                            identifier: {\n                                value: this.state.patient\n                            }\n                        }\n                    }\n                ]\n            }\n            await this.props.client.create({resourceType: \"Communication\", body: entryPatient});\n        }\n        window.location.reload(false);\n    }\n\n    async updatePrescription () {\n        let tmpStr = this.state.frequency + \"x \" + this.state.doseValue + this.state.doseUnit + \" every \" + this.state.period + \" \" + this.state.periodUnit\n        this.state.dosing = tmpStr;\n        let entry = {\n            resourceType: \"MedicationRequest\",\n            id: this.state.id,\n            status: \"active\",\n            intent: \"order\",\n            dosageInstruction: [{\n                text: this.state.dosing,\n                timing: {\n                    repeat: {\n                        boundsPeriod: {\n                            start: this.state.begin,\n                            end: this.state.end\n                        },\n                        frequency: this.state.frequency,\n                        period: this.state.period,\n                        periodUnit: this.state.periodUnit\n                    }\n                },\n                asNeededBoolean: this.state.asNeeded,\n                doseAndRate: [{\n                    doseQuantity: {\n                        value: this.state.doseValue,\n                        unit: this.state.doseUnit,\n                        system: \"http://snomed.info/sct\",\n                        code: this.codes.mg\n                    }\n                }]\n            }]\n    }\n    // console.log(this.props.client)\n    let response = await this.props.client.update({resourceType: \"MedicationRequest\", id: this.state.id, body: entry})\n    }\n\n    render() {\n\n        if (this.props.data === false) {\n            console.log(\"State: \" + this.state.patient)\n            console.log(\"Props: \" + this.props.patient)\n            console.log(\"Full state:\")\n            console.log(this.state)\n            return (\n                <Modal\n                    //{...this.props}\n                    size=\"xl\"\n                    aria-labelledby=\"contained-modal-title-vcenter\"\n                    centered\n                    show={this.props.show}\n                    onHide={this.props.onHide}\n                >\n                <Modal.Header closeButton>\n                <Modal.Title id=\"contained-modal-title-vcenter\">\n                    Adding a new prescription ...\n                </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                <form>\n                    <div className=\"form-controller\">\n                        <div className=\"form-row\">\n                            <div className=\"form-group col-md-3\">\n                                <label htmlFor=\"medicine\">Medicine</label>\n                                <select name=\"medicine\" \n                                        onChange={this.handleChange}\n                                        id=\"medicine\"\n                                        className=\"form-control\">\n                                    <option value=\"\" selected disabled hidden>Choose...</option>\n                                    <optgroup label=\"for cancer\">\n                                        <option value=\"Codeine\">Codeine</option>\n                                        <option value=\"Morphine\">Morphine</option>\n                                        <option value=\"Nivolumab\">Nivolumab</option>\n                                        <option value=\"Sunitinib\">Sunitinib</option>\n                                    </optgroup>\n                                    <optgroup label=\"for side effects\">\n                                        <option value=\"Loperamide\">Loperamide</option>\n                                        <option value=\"Budesonide\">Budesonide</option>\n                                    </optgroup>\n                                    <optgroup label=\"for other problems\">\n                                        <option value=\"St John's Wort\">St John's Wort</option>\n                                    </optgroup>\n                                </select>\n                            </div>\n                        </div>\n                        <div className=\"form-row\" id=\"section-label\">Using period</div>\n                        <div className=\"form-row\">\n                            <div className=\"form-group col-md-4\">\n                                <label htmlFor=\"from\">Begin</label>\n                                <input type=\"date\" \n                                        name=\"from\" \n                                        onChange={this.handleChange}\n                                        id=\"from\"\n                                        className=\"form-control\"\n                                />\n                            </div>\n                            <div className=\"form-group col-md-4\">\n                                <label htmlFor=\"to\">End</label>\n                                <input type=\"date\"\n                                        name=\"to\" \n                                        onChange={this.handleChange}\n                                        id=\"to\"\n                                        className=\"form-control\"\n                                />\n                            </div>\n                        </div>                 \n                        <div className=\"form-row\">\n                            <div className=\"form-group col-md-4\">\n                                <label htmlFor=\"asNeeded\">Take as needed</label>\n                                <select name=\"asNeeded\" \n                                        onChange={this.handleChange}\n                                        id=\"asNeeded\"\n                                        className=\"form-control\">\n                                    <option value=\"\" selected disabled hidden>Choose...</option>\n                                    <option value={false}>False</option>\n                                    <option value={true}>True</option>\n                                </select>\n                            </div>\n                        </div>\n                        <div className=\"form-row\" id=\"section-label\">Dosing</div>\n                        <div className=\"form-row\">\n                            <div className=\"form-group col-md-2\">\n                                <input type=\"number\"\n                                        name=\"doseValue\"\n                                        onChange={this.handleChange}\n                                        id=\"doseValue\"\n                                        className=\"form-control\"\n                                />\n                            </div>\n                            <div className=\"form-group col-md-2\">\n                                <select name=\"doseUnit\"\n                                        onChange={this.handleChange}\n                                        id=\"doseUnit\"\n                                        className=\"form-control\">\n                                    <option value=\"\" selected disabled hidden>Choose...</option>\n                                    <option value=\"mg\">mg</option>\n                                </select>\n                            </div>\n                            <div className=\"form-group col-md-2\">\n                                <input type=\"number\"\n                                        name=\"frequency\"\n                                        onChange={this.handleChange}\n                                        id=\"frequency\"\n                                        className=\"form-control\"\n                                />\n                            </div>\n                            <div className=\"form-group col-md-2\">times every</div>\n                            <div className=\"form-group col-md-2\">\n                                <input type=\"number\"\n                                        name=\"period\"\n                                        onChange={this.handleChange}\n                                        id=\"period\"\n                                        className=\"form-control\"\n                                />\n                            </div>\n                            <div className=\"form-group col-md-2\">\n                                <select name=\"periodUnit\" \n                                        onChange={this.handleChange}\n                                        id=\"periodUnit\"\n                                        className=\"form-control\">\n                                    <option value=\"\" selected disabled hidden>Choose...</option>\n                                    <option value=\"min\">minute(s)</option>\n                                    <option value=\"h\">hour(s)</option>\n                                    <option value=\"d\">day(s)</option>\n                                    <option value=\"wk\">week(s)</option>\n                                </select>\n                            </div>\n                        </div>\n                    </div>\n                </form>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button onClick={() => {this.addNewPrescription(); this.props.onHide()}}>Add</Button>\n                    <Button onClick={this.props.onHide}>Close</Button>\n                </Modal.Footer>\n            </Modal>\n            )\n        }\n        else {\n            console.log(\"State: \" + this.state.patient)\n            console.log(\"Props: \" + this.props.patient)\n            console.log(\"Full state:\")\n            console.log(this.state)\n            return (\n                <Modal\n                    size=\"xl\"\n                    aria-labelledby=\"contained-modal-title-vcenter\"\n                    centered\n                    show={this.props.show}\n                    onHide={this.props.onHide}\n                >\n                <Modal.Header closeButton>\n                  <Modal.Title id=\"contained-modal-title-vcenter\">\n                    Editing a prescription ...\n                  </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                <form>\n                    <div className=\"form-controller\">\n                        <div className=\"form-row\">\n                            <div className=\"form-group col-md-4\">\n                                <label htmlFor=\"medicine\">medicine</label>\n                                <select name=\"medicine\" \n                                        onChange={this.handleChange}\n                                        id=\"medicine\"\n                                        className=\"form-control\"\n                                        value={this.state.medicine}\n                                        disabled>\n                                    <option value=\"\" selected disabled hidden>Choose...</option>\n                                    <optgroup label=\"for cancer\">\n                                        <option value=\"codeine\">Codeine</option>\n                                        <option value=\"morphine\">Morphine</option>\n                                        <option value=\"nivolumab\">Nivolumab</option>\n                                        <option value=\"sunitinib\">Sunitinib</option>\n                                    </optgroup>\n                                    <optgroup label=\"for side effects\">\n                                        <option value=\"loperamide\">Loperamide</option>\n                                        <option value=\"budesonide\">Budesonide</option>\n                                    </optgroup>\n                                    <optgroup label=\"for other problems\">\n                                        <option value=\"st john's wort\">St John's Wort</option>\n                                    </optgroup>\n                                </select>\n                            </div>\n                        </div>\n                        <div className=\"form-row\" id=\"section-label\">Using period</div>\n                        <div className=\"form-row\">\n                            <div className=\"form-group col-md-4\">\n                                <label htmlFor=\"from\">Begin</label>\n                                <input type=\"date\" \n                                        name=\"from\" \n                                        onChange={this.handleChange}\n                                        id=\"from\"\n                                        className=\"form-control\"\n                                        value={this.state.begin}\n                                        disabled\n                                />\n                            </div>\n                            <div className=\"form-group col-md-4\">\n                                <label htmlFor=\"end\">End</label>\n                                <input type=\"date\"\n                                        name=\"end\" \n                                        onChange={this.handleChange}\n                                        id=\"end\"\n                                        className=\"form-control\"\n                                        value={this.state.end}\n                                />\n                            </div>\n                        </div>                 \n                        <div className=\"form-row\">\n                            <div className=\"form-group col-md-4\">\n                                <label htmlFor=\"asNeeded\">Take as needed</label>\n                                <select name=\"asNeeded\" \n                                        onChange={this.handleChange}\n                                        id=\"asNeeded\"\n                                        className=\"form-control\"\n                                        value={this.state.asNeeded}>\n                                    <option value=\"\" selected disabled hidden>Choose...</option>\n                                    <option value={0}>False</option>\n                                    <option value={1}>True</option>\n                                </select>\n                            </div>\n                        </div>\n                        <div className=\"form-row\" id=\"section-label\">Dosing</div>\n                        <div className=\"form-row\">\n                            <div className=\"form-group col-md-2\">\n                                <input type=\"number\"\n                                        name=\"doseValue\"\n                                        onChange={this.handleChange}\n                                        id=\"doseValue\"\n                                        className=\"form-control\"\n                                        value={this.state.doseValue}\n                                />\n                            </div>\n                            <div className=\"form-group col-md-2\">\n                                <select name=\"doseUnit\"\n                                        onChange={this.handleChange}\n                                        id=\"doseUnit\"\n                                        className=\"form-control\"\n                                        value={this.state.doseUnit}>\n                                    <option value=\"\" selected disabled hidden>Choose...</option>\n                                    <option value=\"mg\">mg</option>\n                                </select>\n                            </div>\n                            <div className=\"form-group col-md-2\">\n                                <input type=\"number\"\n                                        name=\"frequency\"\n                                        onChange={this.handleChange}\n                                        id=\"frequency\"\n                                        className=\"form-control\"\n                                        value={this.state.frequency}\n                                />\n                            </div>\n                            <div className=\"form-group col-md-2\">times every</div>\n                            <div className=\"form-group col-md-2\">\n                                <input type=\"number\"\n                                        name=\"period\"\n                                        onChange={this.handleChange}\n                                        id=\"period\"\n                                        className=\"form-control\"\n                                        value={this.state.period}\n                                />\n                            </div>\n                            <div className=\"form-group col-md-2\">\n                                <select name=\"periodUnit\" \n                                        onChange={this.handleChange}\n                                        id=\"periodUnit\"\n                                        className=\"form-control\"\n                                        value={this.state.periodUnit}>\n                                    <option value=\"\" selected disabled hidden>Choose...</option>\n                                    <option value=\"min\">minute(s)</option>\n                                    <option value=\"h\">hour(s)</option>\n                                    <option value=\"d\">day(s)</option>\n                                    <option value=\"wk\">week(s)</option>\n                                </select>\n                            </div>\n                        </div>\n                    </div>\n                </form>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button onClick={() => {this.updatePrescription(); this.props.onHide()}}>Save</Button>\n                    <Button onClick={this.props.onHide}>Close</Button>\n                </Modal.Footer>\n              </Modal>\n            )\n        }\n    }\n}\n\nexport default PrescriptionForm;","E:\\GitHub\\CAPABLE-PhAPP\\capable_template\\src\\PatientCard.js",["61"],"import { Modal, Row } from \"react-bootstrap\";\nimport \"./bootstrap.min.css\";\nimport \"./styles.css\";\n\nfunction convertToBool(input) {\n    if (input === 0) {\n        return \"False\"\n    }\n    else {\n        return \"True\"\n    }\n} \n\nexport default function PatientCard({show, onHide, data}) {\n    return (\n        <Modal\n            //{...this.props}\n            size=\"md\"\n            aria-labelledby=\"contained-modal-title-vcenter\"\n            centered\n            show={show}\n            onHide={onHide}\n        >\n            <Modal.Header closeButton>\n                <Modal.Title id=\"contained-modal-title-vcenter\">\n                        Patient's card\n                </Modal.Title>\n            </Modal.Header>\n                <Modal.Body>\n                    <div className=\"form-row\">\n                        <div className=\"form-group col-md-6\">\n                            First name: \n                        </div>\n                        <div className=\"form-group col-md-6\">\n                            <b><i>{data.fname}</i></b>\n                        </div>\n                    </div>\n                    <div className=\"form-row\">\n                        <div className=\"form-group col-md-6\">\n                            Second name: \n                        </div>\n                        <div className=\"form-group col-md-6\">\n                            <b><i>{data.sname}</i></b>\n                        </div>\n                    </div>\n                    <div className=\"form-row\">\n                        <div className=\"form-group col-md-6\">\n                            Date of birth: \n                        </div>\n                        <div className=\"form-group col-md-6\">\n                            <b><i>{data.birthDate}</i></b>\n                        </div>\n                    </div>\n                    <div className=\"form-row\">\n                        <div className=\"form-group col-md-6\">\n                            Gender: \n                        </div>\n                        <div className=\"form-group col-md-6\">\n                            <b><i>{data.gender}</i></b>\n                        </div>\n                    </div>\n                    <div className=\"form-row\">\n                        <div className=\"form-group col-md-6\">\n                            Weight: \n                        </div>\n                        <div className=\"form-group col-md-6\">\n                            <b><i>{data.weight} kg</i></b>\n                        </div>\n                    </div>\n                    <div className=\"form-row\">\n                        <div className=\"form-group col-md-6\">\n                            Height: \n                        </div>\n                        <div className=\"form-group col-md-6\">\n                            <b><i>{data.height} cm</i></b>\n                        </div>\n                    </div>\n                    <div className=\"form-row\">\n                        <div className=\"form-group col-md-6\">\n                            BMI: \n                        </div>\n                        <div className=\"form-group col-md-6\">\n                            <b><i>{data.bmi}</i></b>\n                        </div>\n                    </div>\n                    <div className=\"form-row\">\n                        <div className=\"form-group col-md-6\">\n                            Years smoking: \n                        </div>\n                        <div className=\"form-group col-md-6\">\n                            <b><i>{data.yearsSmoking}</i></b>\n                        </div>\n                    </div>\n                    <div className=\"form-row\">\n                        <div className=\"form-group col-md-6\">\n                            Years drinking: \n                        </div>\n                        <div className=\"form-group col-md-6\">\n                            <b><i>{data.yearsDrinking}</i></b>\n                        </div>\n                    </div>\n                    <div className=\"form-row\">\n                        <div className=\"form-group col-md-6\">\n                            Dyssomnia: \n                        </div>\n                        <div className=\"form-group col-md-6\">\n                            <b><i>{convertToBool(data.dyssomnia)}</i></b>\n                        </div>\n                    </div>\n                    <div className=\"form-row\">\n                        <div className=\"form-group col-md-6\">\n                            Diabetes mellitus: \n                        </div>\n                        <div className=\"form-group col-md-6\">\n                            <b><i>{convertToBool(data.diabetes)}</i></b>\n                        </div>\n                    </div>\n                    <div className=\"form-row\">\n                        <div className=\"form-group col-md-6\">\n                            Hypertension: \n                        </div>\n                        <div className=\"form-group col-md-6\">\n                            <b><i>{convertToBool(data.hypertension)}</i></b>\n                        </div>\n                    </div>\n                    <div className=\"form-row\">\n                        <div className=\"form-group col-md-6\">\n                            Collagen vascular: \n                        </div>\n                        <div className=\"form-group col-md-6\">\n                            <b><i>{convertToBool(data.collagenVascular)}</i></b>\n                        </div>\n                    </div>\n                    <div className=\"form-row\">\n                        <div className=\"form-group col-md-6\">\n                            IBD: \n                        </div>\n                        <div className=\"form-group col-md-6\">\n                            <b><i>{convertToBool(data.ibd)}</i></b>\n                        </div>\n                    </div>\n                    <div className=\"form-row\">\n                        <div className=\"form-group col-md-6\">\n                            Recent gastro operation: \n                        </div>\n                        <div className=\"form-group col-md-6\">\n                            <b><i>{convertToBool(data.gastroOperation)}</i></b>\n                        </div>\n                    </div>\n                    <div className=\"form-row\">\n                        <div className=\"form-group col-md-6\">\n                            Physical activity (average): \n                        </div>\n                        <div className=\"form-group col-md-6\">\n                            <b><i>{data.physicalActivity}x per week</i></b>\n                        </div>\n                    </div>\n                </Modal.Body>\n            <Modal.Footer>\n\n            </Modal.Footer>\n        </Modal>\n    )\n}",{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","severity":1,"message":"67","line":552,"column":30,"nodeType":"68","messageId":"69","endLine":552,"endColumn":31},{"ruleId":"70","severity":1,"message":"71","line":17,"column":21,"nodeType":"72","endLine":17,"endColumn":82},{"ruleId":"73","severity":1,"message":"74","line":11,"column":7,"nodeType":"75","messageId":"76","endLine":11,"endColumn":12},{"ruleId":"77","severity":1,"message":"78","line":45,"column":28,"nodeType":"72","endLine":45,"endColumn":96},{"ruleId":"73","severity":1,"message":"79","line":82,"column":16,"nodeType":"75","messageId":"76","endLine":82,"endColumn":17},{"ruleId":"66","severity":1,"message":"67","line":365,"column":30,"nodeType":"68","messageId":"69","endLine":365,"endColumn":31},{"ruleId":"73","severity":1,"message":"80","line":149,"column":13,"nodeType":"75","messageId":"76","endLine":149,"endColumn":21},{"ruleId":"73","severity":1,"message":"80","line":224,"column":9,"nodeType":"75","messageId":"76","endLine":224,"endColumn":17},{"ruleId":"73","severity":1,"message":"81","line":1,"column":17,"nodeType":"75","messageId":"76","endLine":1,"endColumn":20},"no-native-reassign",["82"],"no-negated-in-lhs",["83"],"no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-unused-vars","'codes' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'j' is defined but never used.","'response' is assigned a value but never used.","'Row' is defined but never used.","no-global-assign","no-unsafe-negation"]